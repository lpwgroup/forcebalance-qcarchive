"""
Read ForceBalance optgeo evaluation results,
sort the molecules by their contribution to RMSE
print a table showing the best to worst molecules
"""


import os
import pickle
import numpy as np
from collections import defaultdict

def read_pickle_data(fnm):
    """
    Read data from pickled file generated by plot_optgeo_each_smirks.py

    The content of the pickle file:
    data_save = {
        'ffxml': args.ffxml,
        'tmp_folder': tmp_folder,
        'iter_folder': iter_folder,
        'data_qm_v_mm': data_qm_v_mm,
    }

    The main content is in data_qm_v_mm
    data_qm_v_mm[fftype][sid] = [
        {
            'mol2_fnm': mol2_fnm,
            'atom_indices': atom_indices,
            'smirks': smirks,
            'id': sid,
            'qm': qm,
            'mm': mm,
            'mm_iter0': None or mm of iter0,
        },
        ...
    ]
    """
    print(f'reading saved data from {fnm}')
    with open(fnm, 'rb') as pfile:
        data_save = pickle.load(pfile)
        data_qm_v_mm = data_save['data_qm_v_mm']
    return data_qm_v_mm

def read_mol_info_pickle(fnm):
    """
    Read data from pickled file generated by pickle_fnm_w_smiles.py

    The content of the pickle file:
        dic[mol2_fnm] = {
            'label' : label,
            'smiles' : smiles,
            'mol_id' : mol_id}
    """
    print(f'reading saved data from {fnm}')
    with open(fnm, 'rb') as pfile:
        data_save = pickle.load(pfile)
    return data_save

def aggregate_rmse_data(optgeo_data):
    """ Read optgeo data for each internal coordinate, aggregate into each molecule """
    # pre-defined metrics for each type of internal coordinates
    IC_DENOMS = {
        'bonds': 0.05, # Angstroms
        'angles': 8, # Degrees
        'propertorsions': 20, # Degrees
        'impropertorsions': 20, # Degrees
    }
    molecule_obj_dict = defaultdict(float)
    for fftype in optgeo_data:
        denom = IC_DENOMS[fftype.lower()]
        for sid in optgeo_data[fftype]:
            for d in optgeo_data[fftype][sid]:
                qm_value = d['qm']
                mm_value = d['mm']
                mol2_fnm = d['mol2_fnm']
                objective = ((qm_value - mm_value) / denom)**2
                molecule_obj_dict[mol2_fnm] += objective
    return molecule_obj_dict


def sort_print_obj_table(molecule_obj_dict, mol_info):
    sorted_molecules = sorted(molecule_obj_dict, key=lambda x: molecule_obj_dict[x])
    print("Results")
    print(f"idx       {'filename':^100s} {'SMILES':^50s} {'id':^10s} objective")
    print('-'*120)
    for i, mol2_fnm in enumerate(sorted_molecules):
        short_mol2_fnm = 'targets/' + mol2_fnm.split('/')[-2] + '/' + mol2_fnm.split('/')[-1]
        obj = molecule_obj_dict[mol2_fnm]
        smiles = mol_info[short_mol2_fnm]['smiles']
        id = mol_info[short_mol2_fnm]['mol_id']
        print(f'{i:<7}   {short_mol2_fnm:80s} {smiles:50s} {id:10s} {obj:9.5f}')

def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('optgeo_pickle_file', help='pickled data generated by plot_optgeo_each_smirks.py')
    parser.add_argument('mol_info', help='pickled data generated by pickle_fnm_w_smiles.py')
    args = parser.parse_args()

    optgeo_data = read_pickle_data(args.optgeo_pickle_file)
    mol_info = read_mol_info_pickle(args.mol_info)

    molecule_obj_dict = aggregate_rmse_data(optgeo_data)

    sort_print_obj_table(molecule_obj_dict, mol_info)

if __name__ == "__main__":
    main()
